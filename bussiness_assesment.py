# -*- coding: utf-8 -*-
"""Bussiness Assesment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YAm256Ok5vhQOmUZ2dow_rRC3BLYwmSR
"""

#!pip install pandas streamlit

from google.colab import files
uploaded = files.upload()

import pandas as pd
import streamlit as st

# Load Excel data into a DataFrame
uploaded_file = 'business.xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# User input for points
user_input = st.number_input('Enter Points:', min_value=0, max_value=10)

# Filter data based on user input
filtered_data = df[df['Points'] >= user_input]

# Display the filtered data
st.write('Filtered Data:')
st.write(filtered_data)

# Create and display a chart based on the filtered data
st.bar_chart(filtered_data)

import pandas as pd
import streamlit as st

# Load Excel data into a DataFrame
uploaded_file = 'business.xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# User input for points
user_input = st.number_input('Enter Points:', min_value=0, max_value=10)

# Filter data based on user input using the 'Points' column
filtered_data = user_input

# Display the entire DataFrame
st.write('Excel Data:')
st.write(df)

# Create and display a chart based on the entire DataFrame
st.bar_chart(df)

# Create a separate chart based on filtered data
st.write('Filtered Data:')
st.bar_chart(filtered_data)

import pandas as pd
import streamlit as st

# Load Excel data into a DataFrame
uploaded_file = 'business.xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# User input for points
user_input = st.number_input('Enter Points:', min_value=0, max_value=10)

# Filter data based on user input using the 'Points' column
filtered_data = df[df['Points'] == int(user_input)]  # Corrected filtering

# Display the entire DataFrame
st.write('Excel Data:')
st.write(df)

# Create and display a chart based on the entire DataFrame
st.bar_chart(df)

# Create a separate chart based on filtered data
st.write('Filtered Data:')
st.bar_chart(filtered_data)

from pathlib import Path  # Python Standard Library
import pandas as pd  # pip install pandas openpyxl
#!pip install pyecharts
from pyecharts import options as opts
from pyecharts.charts import Bar, Calendar, Tab



from google.colab import files
uploaded = files.upload()

#@st.cache_data
def get_data_from_excel():
    df = pd.read_excel(
        io="business (1).xlsx",
        engine="openpyxl",
        sheet_name="Sheet1",
        #skiprows=3,
        usecols="A:D",
        nrows=20,
    )
    # Add 'hour' column to dataframe
    #df["hour"] = pd.to_datetime(df["Time"], format="%H:%M:%S").dt.hour
    return df

df = get_data_from_excel()
print(df)

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']
    points = st.sidebar.number_input(f'Points for Question {index + 1} - {question}:', value=row['Points'], min_value=0, max_value=10)
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

#@st.cache_data
def get_data_from_excel():
    df = pd.read_excel(
        io="business (1).xlsx",
        engine="openpyxl",
        sheet_name="Sheet1",
        #skiprows=3,
        usecols="A:D",
        nrows=20,
    )
    # Add 'hour' column to dataframe
    #df["hour"] = pd.to_datetime(df["Time"], format="%H:%M:%S").dt.hour
    return df

df = get_data_from_excel()
print(df)

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']
    points = st.sidebar.number_input(f'Points for Question {index + 1} - {question}:', value=row['Points'], min_value=0, max_value=10)
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

# Specify the columns you want to print
columns_to_print = ['A', 'B', 'C', 'D']

# Iterate through the DataFrame and print values of the specified columns
for index, row in df.iterrows():
    print(f"Row {index + 1}:")
    for column in columns_to_print:
        value = row[column]
        print(f"{column}: {value}")
    print()

# Specify the columns you want to print
columns_to_print = ['Questions', 'Category', 'Aspect', 'Points']

# Iterate through the DataFrame and print values of the specified columns
for index, row in df.iterrows():
    print(f"Row {index + 1}:")
    for column in columns_to_print:
        value = row[column]
        print(f"{column}: {value}")
    print()



from google.colab import files
uploaded = files.upload()

#@st.cache_data
def get_data_from_excel():
    df = pd.read_excel(
        io="business (1) (1).xlsx",
        engine="openpyxl",
        sheet_name="Sheet2",
        #skiprows=3,
        usecols="A:D",
        nrows=20,
    )
    # Add 'hour' column to dataframe
    #df["hour"] = pd.to_datetime(df["Time"], format="%H:%M:%S").dt.hour
    return df

df = get_data_from_excel()
print(df)

# Specify the columns you want to print
columns_to_print = ['Questions', 'Catagory', 'Aspects', 'Points']

# Iterate through the DataFrame and print values of the specified columns
for index, row in df.iterrows():
    print(f"Row {index + 1}:")
    for column in columns_to_print:
        value = row[column]
        print(f"{column}: {value}")
    print()

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']
    points = st.sidebar.number_input(f'Points for Questions {index + 1} - {question}:', value=row['Points'], min_value=0, max_value=10)
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

import pandas as pd
import streamlit as st

# Load Excel data into a DataFrame
uploaded_file = 'business.xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']

    # Specify the data type for value as int
    points = st.sidebar.number_input(
        f'Points for Question {index + 1} - {question}:',
        value=int(row['Points']),  # Convert to int
        min_value=0,
        max_value=10
    )
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

import pandas as pd
import streamlit as st

# Load Excel data into a DataFrame
uploaded_file = 'business (1) (1).xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']

    # Specify the data type for value as int
    points = st.sidebar.number_input(
        f'Points for Question {index + 1} - {question}:',
        value=int(row['Points']),  # Convert to int
        min_value=0,
        max_value=10
    )
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

# Create a summary table
st.header("Summary Table")

# Create a DataFrame for the summary table
category_aspects_df = pd.pivot_table(
    df,
    values='Points',
    index='Category',
    columns='Aspects',
    aggfunc='sum',
    fill_value=0
)

# Display the summary table
st.write(category_aspects_df)

# Calculate and display the sum of rows and columns
st.write("Sum of Rows (Categories):")
st.write(category_aspects_df.sum(axis=1))

st.write("Sum of Columns (Aspects):")
st.write(category_aspects_df.sum(axis=0))

# Create a summary table
st.header("Summary Table")

# Create a DataFrame for the summary table
category_aspects_df = pd.pivot_table(
    df,
    values='Points',
    index='Catagory',
    columns='Aspects',
    aggfunc='sum',
    fill_value=0
)

# Display the summary table
st.write(category_aspects_df)

# Calculate and display the sum of rows and columns
st.write("Sum of Rows (Categories):")
st.write(category_aspects_df.sum(axis=1))

st.write("Sum of Columns (Aspects):")
st.write(category_aspects_df.sum(axis=0))

import pandas as pd
import streamlit as st
from pyecharts.charts import Bar
from pyecharts import options as opts

# Create two bar charts using Pyecharts
bar_chart_categories = (
    Bar()
    .add_xaxis(category_sum.index.to_list())
    .add_yaxis("Total Points", category_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Category"))
)

bar_chart_aspects = (
    Bar()
    .add_xaxis(aspect_sum.index.to_list())
    .add_yaxis("Total Points", aspect_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Aspect"))
)

# Combine both charts into a single Pyecharts tab
bar_charts_tab = Tab()
bar_charts_tab.add(bar_chart_categories, "Category Bar Chart")
bar_charts_tab.add(bar_chart_aspects, "Aspect Bar Chart")

# Display the Pyecharts tab in Streamlit
st.header("Bar Charts")
st.pyecharts(bar_charts_tab)

# Create two bar charts using Pyecharts
bar_chart_categories = (
    Bar()
    .add_xaxis(category_sum.index.to_list())
    .add_yaxis("Total Points", category_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Category"))
)

bar_chart_aspects = (
    Bar()
    .add_xaxis(aspect_sum.index.to_list())
    .add_yaxis("Total Points", aspect_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Aspect"))
)

# Combine both charts into a single Pyecharts tab
bar_charts_tab = Tab()
bar_charts_tab.add(bar_chart_categories, "Category Bar Chart")
bar_charts_tab.add(bar_chart_aspects, "Aspect Bar Chart")

# Display the Pyecharts tab in Streamlit
st.header("Bar Charts")
st.pyecharts(bar_charts_tab)

# Create a summary table
st.header("Summary Table")

# Create a DataFrame for the summary table
category_aspects_df = pd.pivot_table(
    df,
    values='Points',
    index='Catagory',
    columns='Aspects',
    aggfunc='sum',
    fill_value=0
)

# Display the summary table
st.write(category_aspects_df)

# Calculate and display the sum of rows (categories) and columns (aspects)
st.write("Sum of Rows (Categories):")
category_sum = category_aspects_df.sum(axis=1)
st.write(category_sum)

st.write("Sum of Columns (Aspects):")
aspect_sum = category_aspects_df.sum(axis=0)
st.write(aspect_sum)

# Create two bar charts using Pyecharts
bar_chart_categories = (
    Bar()
    .add_xaxis(category_sum.index.to_list())
    .add_yaxis("Total Points", category_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Category"))
)

bar_chart_aspects = (
    Bar()
    .add_xaxis(aspect_sum.index.to_list())
    .add_yaxis("Total Points", aspect_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Aspect"))
)

# Combine both charts into a single Pyecharts tab
bar_charts_tab = Tab()
bar_charts_tab.add(bar_chart_categories, "Category Bar Chart")
bar_charts_tab.add(bar_chart_aspects, "Aspect Bar Chart")

# Display the Pyecharts tab in Streamlit
st.header("Bar Charts")
st.pyecharts(bar_charts_tab)

import pandas as pd
import streamlit as st
from pyecharts.charts import Bar
from pyecharts import options as opts

# Load Excel data into a DataFrame (if not already loaded)
uploaded_file = 'business (1) (1).xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']

    # Specify the data type for value as int
    points = st.sidebar.number_input(
        f'Points for Question {index + 1} - {question}:',
        value=int(row['Points']),  # Convert to int
        min_value=0,
        max_value=10
    )
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

# Create a summary table
st.header("Summary Table")

# Create a DataFrame for the summary table
category_aspects_df = pd.pivot_table(
    df,
    values='Points',
    index='Catagory',
    columns='Aspects',
    aggfunc='sum',
    fill_value=0
)

# Display the summary table
st.write(category_aspects_df)

# Calculate and display the sum of rows (categories) and columns (aspects)
st.write("Sum of Rows (Categories):")
category_sum = category_aspects_df.sum(axis=1)
st.write(category_sum)

st.write("Sum of Columns (Aspects):")
aspect_sum = category_aspects_df.sum(axis=0)
st.write(aspect_sum)

# Create two bar charts using Pyecharts
bar_chart_categories = (
    Bar()
    .add_xaxis(category_sum.index.to_list())
    .add_yaxis("Total Points", category_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Category"))
)

bar_chart_aspects = (
    Bar()
    .add_xaxis(aspect_sum.index.to_list())
    .add_yaxis("Total Points", aspect_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Aspect"))
)

# Combine both charts into a single Pyecharts tab
bar_charts_tab = Tab()
bar_charts_tab.add(bar_chart_categories, "Category Bar Chart")
bar_charts_tab.add(bar_chart_aspects, "Aspect Bar Chart")

# Display the Pyecharts tab in Streamlit
st.header("Bar Charts")
st.pyecharts(bar_charts_tab)

import pandas as pd
import streamlit as st
from pyecharts.charts import Bar
from pyecharts import options as opts
from pyecharts.render import make_snapshot
from pyecharts.globals import ThemeType
from snapshot_selenium import snapshot

# Load Excel data into a DataFrame (if not already loaded)
uploaded_file = 'business (1) (1).xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']

    # Specify the data type for value as int
    points = st.sidebar.number_input(
        f'Points for Question {index + 1} - {question}:',
        value=int(row['Points']),  # Convert to int
        min_value=0,
        max_value=10
    )
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

# Create a summary table
st.header("Summary Table")

# Create a DataFrame for the summary table
category_aspects_df = pd.pivot_table(
    df,
    values='Points',
    index='Catagory',
    columns='Aspects',
    aggfunc='sum',
    fill_value=0
)

# Display the summary table
st.write(category_aspects_df)

# Calculate and display the sum of rows (categories) and columns (aspects)
st.write("Sum of Rows (Categories):")
category_sum = category_aspects_df.sum(axis=1)
st.write(category_sum)

st.write("Sum of Columns (Aspects):")
aspect_sum = category_aspects_df.sum(axis=0)
st.write(aspect_sum)

# Create two bar charts using Pyecharts
bar_chart_categories = (
    Bar()
    .add_xaxis(category_sum.index.to_list())
    .add_yaxis("Total Points", category_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Category"))
)

bar_chart_aspects = (
    Bar()
    .add_xaxis(aspect_sum.index.to_list())
    .add_yaxis("Total Points", aspect_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Aspect"))
)

# Combine both charts into a single Pyecharts tab
bar_charts_tab = Tab()
bar_charts_tab.add(bar_chart_categories, "Category Bar Chart")
bar_charts_tab.add(bar_chart_aspects, "Aspect Bar Chart")

# Display the Pyecharts tab in Streamlit
st.header("Bar Charts")
st.pyecharts(bar_charts_tab)

import pandas as pd
import streamlit as st
from pyecharts.charts import Bar
from pyecharts import options as opts

# Load Excel data into a DataFrame (if not already loaded)
uploaded_file = 'business (1) (1).xlsx'
df = pd.read_excel(uploaded_file)

# Streamlit app header
st.title('Interactive Dashboard')

# Create a list to store updated points
updated_points = []

# ---- SIDEBAR ----
st.sidebar.header("Update Points for Questions:")

# Loop through questions and display input fields in the sidebar
for index, row in df.iterrows():
    question = row['Questions']

    # Specify the data type for value as int
    points = st.sidebar.number_input(
        f'Points for Question {index + 1} - {question}:',
        value=int(row['Points']),  # Convert to int
        min_value=0,
        max_value=10
    )
    updated_points.append(points)

# Update the 'Points' column in the DataFrame with the latest input
df['Points'] = updated_points

# Display the updated DataFrame
st.write('Updated Excel Data:')
st.write(df)

# Save the updated DataFrame back to the Excel file
df.to_excel(uploaded_file, index=False, engine='openpyxl')

# Create a summary table
st.header("Summary Table")

# Create a DataFrame for the summary table
category_aspects_df = pd.pivot_table(
    df,
    values='Points',
    index='Catagory',
    columns='Aspects',
    aggfunc='sum',
    fill_value=0
)

# Display the summary table
st.write(category_aspects_df)

# Calculate and display the sum of rows (categories) and columns (aspects)
st.write("Sum of Rows (Categories):")
category_sum = category_aspects_df.sum(axis=1)
st.write(category_sum)

st.write("Sum of Columns (Aspects):")
aspect_sum = category_aspects_df.sum(axis=0)
st.write(aspect_sum)

# Create two bar charts using Pyecharts
bar_chart_categories = (
    Bar()
    .add_xaxis(category_sum.index.to_list())
    .add_yaxis("Total Points", category_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Category"))
)

bar_chart_aspects = (
    Bar()
    .add_xaxis(aspect_sum.index.to_list())
    .add_yaxis("Total Points", aspect_sum.values)
    .set_global_opts(title_opts=opts.TitleOpts(title="Total Points by Aspect"))
)

# Save the Pyecharts plots as HTML files
bar_chart_categories.render("category_bar_chart.html")
bar_chart_aspects.render("aspect_bar_chart.html")

# Display the Pyecharts plots using iframes
st.header("Bar Charts")

st.write("Total Points by Category:")
st.write(f'<iframe src="category_bar_chart.html" width=800 height=400></iframe>', unsafe_allow_html=True)

st.write("Total Points by Aspect:")
st.write(f'<iframe src="aspect_bar_chart.html" width=800 height=400></iframe>', unsafe_allow_html=True)
